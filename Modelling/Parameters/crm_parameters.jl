#defaults
"""
default params
"""
default_m(N,M,kw) = ones(N)
default_ρ(N,M,kw) = ones(M) 
default_ω(N,M,kw) = ones(M)
default_u(N,M,kw) = copy(rand(Distributions.Dirichlet(M,1.0), N)')
default_l(N,M,kw) = copy(rand(Distributions.Dirichlet(M,1.0), M)') .* kw[:λ]

"""
    generate_params(N,M;f_m = default_m, f_ρ = default_ρ, 
        f_ω = default_ω, f_u = default_u, 
        f_l = default_l, kwargs...)

Function to generate parameter sets for MiCRM simualtions. Requires the system size is defined as well as the functions to generate the actual parameters used in the simulations. Extra arguments can also be passed via the `kwargs` argument. 

By default the function generates a random MiCRM system with no structure and uptake and leakage matricies generated by Dirichlet distribitions. 

The function returns a `NamedTuple` with all the parameters as well as a `kw` entry which itself is a `NamedTuple` with the additional arguments provided.
"""
function generate_params(N,M;f_m = default_m, f_ρ = default_ρ, f_ω = default_ω, f_u = default_u, f_l = default_l, kwargs...)
    kw = Dict{Symbol,Any}(kwargs)
    #consumers
    m = f_m(N,M,kw)
    #resources
    ρ = f_ρ(N,M,kw)
    ω = f_ω(N,M,kw)
    #uptake & leakage
    u = f_u(N,M,kw)
    l = f_l(N,M,kw)

    return (N = N, M = M, u = u, m = m, ρ = ρ, ω = ω, l = l, kw = NamedTuple(zip(keys(kwargs),values(kwargs))))
end

#uptake functions
"""
    modular_uptake(N,M; N_modules = 2, s_ratio = 10.0)

Function that generates a modular uptake matrix for a system with `N` consumers and `M` resources. The matrix is generated using a `Dirichlet` distribution such that the uptake of all consumers sums to 1. 
    
The number of modules determines how many groups of resources the consumers are specialised over. For example if `N_modules = 2` then the resources will be split into two groups with half the consumers specialising on one and half on the other. 

The degree of specialisation is determined by the `s_ratio` value. This controls the relative value of the dirchlet `α` parameters which determine how the probabiltiy density function is distributed over the different resources. Specialisation is obtained by setting the `α` values for resources that specialists consume to higher values meaning they have a higher probablity of a larger value. When `s_ratio = 1` the proabailtiy is uniform and all resources are equally likely to be consumed. When `s_ratio >1` then consumers are more likely to consume resources within thier module. 
"""
function modular_uptake(N,M; N_modules = 2, s_ratio = 10.0)
    @assert N_modules <= M && N_modules <= N

    #baseline
    sR = M ÷  N_modules
    dR = M - (N_modules * sR)

    sC = N ÷  N_modules
    dC = N - (N_modules * sC)

    #get module sizes and add to make to M
    diffR = fill(sR, N_modules)
    diffR[sample(1:N_modules, dR, replace = false)] .+= 1
    mR = [collect(x:y) for (x,y) = zip((cumsum(diffR) .- diffR .+ 1) , cumsum(diffR))]

    #get module sizes and add to make to M
    diffC = fill(sC, N_modules)
    diffC[sample(1:N_modules, dC, replace = false)] .+= 1
    mC = [collect(x:y) for (x,y) = zip((cumsum(diffC) .- diffC .+ 1) , cumsum(diffC))]

    #preallocate u mat
    u = rand(N,M)

    #
    for (x,y) = zip(mC,mR)
        u[x,y] .*= s_ratio
    end
    
    #return u
    [u[i,:] .= u[i,:] ./ sum(u[i,:] ) for i = 1:N]

    return(u)
end

"""
    modular_uptake(N,M,kw)

Wrapper for the modular uptake to allow it to be used in the `generate_params` function.
"""
function modular_uptake(N,M,kw)
    modular_uptake(N,M,N_modules = kw[:N_modules], s_ratio = kw[:s_ratio])
end
"""
    modular_leakage(M; N_modules = 2, s_ratio = 10.0, λ = 0.5)

Function that generates a modular leakage matrix for a system with `M` resources with a directional leakage structure. The matrix is generated using a `Dirichlet` distribution such that the leakage of all resources sums to `λ`. 
    
The number of modules determines how many groups of resources they are split into. For example if `N_modules = 5` then the resources will be split into five groups with the first group of resources tending to leak to the second, the second to the third and so on. 
        
The degree of to which resources leak in this constrained way (verses randomly across all resources) is determined by the `s_ratio` value. This controls the relative value of the dirchlet `α` parameters which determine how the probabiltiy density function is distributed over the different resources. A greater probabiltiy of leakage from one resource to another is obtained by setting the `α` values for resources to higher values. When `s_ratio = 1` the proabailtiy is uniform and all resources are equally likely to be leaked to each other. When `s_ratio >1` then resources are more likely to leak to resources thier own or the next module in the sequence. 
"""
function modular_leakage(M; N_modules = 2, s_ratio = 10.0, λ = 0.5)
    @assert N_modules <= M
    
    #baseline
    sR = M ÷  N_modules
    dR = M - (N_modules * sR)

    #get module sizes and add to make to M
    diffR = fill(sR, N_modules)
    diffR[sample(1:N_modules, dR, replace = false)] .+= 1
    mR = [collect(x:y) for (x,y) = zip((cumsum(diffR) .- diffR .+ 1) , cumsum(diffR))]

    l = rand(M,M)

    for (i,x) = enumerate(mR)
        for (j,y) = enumerate(mR)
            if i == j || i+1 == j
                l[x,y] .*= s_ratio
            end
        end
    end

    [l[i,:] .= λ * l[i,:] ./ sum(l[i,:] ) for i = 1:M]

    return(l)
end

"""
    modular_leakage(N,M,kw::Dict{Symbol, Any})

Wrapper for the modular leakage to allow it to be used in the `generate_params` function.
"""
function modular_leakage(N,M,kw::Dict{Symbol, Any})
    modular_leakage(M; N_modules = kw[:N_modules], s_ratio = kw[:s_ratio], λ = kw[:λ])
end
